import numpy as np
import pickle
import pandas as pd
import os
from flask import Flask, request, render_template

app = Flask(__name__)

# Load the trained model and scaler
model = pickle.load(open(r'C:\Users\afroz\OneDrive\Desktop\smartbridge\IBM\model2.pkl', 'rb'))
scale = pickle.load(open(r'C:\Users\afroz\OneDrive\Desktop\smartbridge\IBM\encoder2.pkl', 'rb'))

@app.route('/')  # route to display the home page
def home():
    return render_template('index.html')  # rendering the home page

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Read the inputs given by the user from the form
        input_features = [float(x) for x in request.form.values()]
        features_values = [np.array(input_features)]

        # Define column names (must match training features)
        column_names = ['holiday', 'temp', 'rain', 'snow', 'weather', 'day', 'month', 'year',
                        'hours', 'minutes', 'seconds']

        # Create DataFrame
        data = pd.DataFrame(features_values, columns=column_names)

        # Apply scaling (do NOT fit again!)
        data_scaled = scale.transform(data)

        # Predict using loaded model
        prediction = model.predict(data_scaled)
        text = "Estimated Traffic Volume is: "

        return render_template('index.html', prediction_text=text + str(int(prediction[0])))
    
    except Exception as e:
        return render_template('index.html', prediction_text=f"Error: {str(e)}")

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    app.run(port=port, debug=True, use_reloader=False)

# from flask import Flask, render_template, request
# import pickle
# import numpy as np

# app = Flask(__name__)

# # Load the model
# model1='C:\Users\afroz\OneDrive\Desktop\smartbridge\IBM\model.pkl'
# with open(model1, "rb") as f:
#     model = pickle.load(f)

# @app.route("/")
# def home():
#     return render_template(r"C:\Users\afroz\OneDrive\Desktop\smartbridge\Flask\templates\index.html")

# @app.route("/predict", methods=["POST"])
# def predict():
#     try:
#         # Get form inputs
#         holiday = int(request.form["holiday"])
#         temp = float(request.form["temp"])
#         rain = int(request.form["rain"])
#         snow = int(request.form["snow"])
#         weather = int(request.form["weather"])
#         year = int(request.form["year"])
#         month = int(request.form["month"])
#         day = int(request.form["day"])
#         hours = int(request.form["hours"])
#         minutes = int(request.form["minutes"])
#         seconds = int(request.form["seconds"])

#         # Prepare input for model
#         input_features = np.array([[holiday, temp, rain, snow, weather, year, month, day, hours, minutes, seconds]])

#         # Predict using the model
#         prediction = model.predict(input_features)[0]
#         prediction_text = f"Estimated Traffic Volume: {int(prediction):,}"
#     except Exception as e:
#         prediction_text = f"Error in prediction: {str(e)}"

#     return render_template("index.html", prediction_text=prediction_text)

# if __name__ == "__main__":
#     app.run(debug=True)